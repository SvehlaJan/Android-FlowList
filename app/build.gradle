plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'com.google.gms.google-services'
}

apply from: '../dependencies.gradle'

def localPropertiesFile = rootProject.file("local.properties")
def localProperties = new Properties()
localProperties.load(new FileInputStream(localPropertiesFile))

android {
    namespace 'tech.svehla.gratitudejournal'
    compileSdkVersion versions.compileSdk

    defaultConfig {
        applicationId "tech.svehla.gratitudejournal"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.compileSdk
        versionCode versions.versionCode
        versionName versions.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
                arguments += ["dagger.hilt.disableModulesHaveInstallInCheck": "true"]
            }
        }
        vectorDrawables {
            useSupportLibrary true
        }

        buildConfigField "String", "WEB_CLIENT_ID", localProperties['webClientId']
        buildConfigField "String", "GIPHY_API_KEY", localProperties['giphyApiKey']
    }

    signingConfigs {
        def certificatesRoot = new File(rootDir, "certificates")
        def keystorePropertiesFile = new File(certificatesRoot, "release.properties")
        def keystoreProperties = new Properties()
        if (keystorePropertiesFile.exists()) {
            keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
            release {
                storeFile file(new File(certificatesRoot, keystoreProperties['keystore']))
                storePassword keystoreProperties['keystorePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }

        debug {
            storeFile file(new File(rootDir, 'debug.keystore'))
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storePassword 'android'
        }
    }

    buildTypes {
//        release {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.release
//            buildConfigField 'boolean', 'DEV_MODE', 'false'
//        }

        debug {
            minifyEnabled false
            debuggable true
            signingConfig signingConfigs.debug
            buildConfigField 'boolean', 'DEV_MODE', 'true'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += [
                '-Xopt-in=kotlin.time.ExperimentalTime',
                '-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi',
                '-Xopt-in=kotlin.RequiresOptIn',
        ]
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion versions.composeVersion
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

// Allow references to generated code
kapt {
    correctErrorTypes = true
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation "androidx.compose.ui:ui:$versions.composeVersion"
    implementation "androidx.compose.material:material:$versions.composeVersion"
    implementation "androidx.compose.ui:ui-tooling-preview:$versions.composeVersion"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.activity:activity-compose:1.3.1'
    implementation "androidx.navigation:navigation-compose:$versions.composeNavVersion"
    implementation 'com.google.android.gms:play-services-auth:19.0.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$versions.composeVersion"
    debugImplementation "androidx.compose.ui:ui-tooling:$versions.composeVersion"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$versions.composeVersion"

    implementation platform("com.google.firebase:firebase-bom:$versions.firebaseVersion")
    implementation 'com.google.firebase:firebase-firestore-ktx'
    implementation 'com.google.firebase:firebase-auth-ktx'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.4.3"

    // architecture components
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$versions.lifecycleVersion"
    implementation "androidx.room:room-ktx:$versions.roomVersion"
    kapt "androidx.room:room-compiler:$versions.roomVersion"

    implementation "com.giphy.sdk:ui:$versions.giphyVersion"

    // hilt
    implementation "com.google.dagger:hilt-android:$versions.hiltVersion"
    implementation "androidx.hilt:hilt-navigation-compose:$versions.hiltComposeNavigation"
    kapt "com.google.dagger:hilt-compiler:$versions.hiltVersion"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$versions.hiltVersion"
    kaptAndroidTest "com.google.dagger:hilt-compiler:$versions.hiltVersion"

    // network
    implementation "com.squareup.okhttp3:logging-interceptor:$versions.okhttpVersion"
    implementation "com.squareup.retrofit2:converter-gson:$versions.retrofitVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$versions.okhttpVersion"

    // logging
    implementation "com.jakewharton.timber:timber:$versions.timberVersion"
}